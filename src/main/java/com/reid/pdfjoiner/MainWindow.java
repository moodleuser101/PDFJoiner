/*
 * Copyright (C) 2025 pmreid
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.reid.pdfjoiner;

import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author pmreid
 */
public class MainWindow extends javax.swing.JFrame {

    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(MainWindow.class.getName());

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        initialiseSourceTable();
    }

    /**
     * Simple helper method to set up the table of source files
     */
    private void initialiseSourceTable() {
        List<String> columns = new ArrayList<>(Arrays.asList("Source file name", "Full path"));
        String[][] rows = new String[1][];

        TableModel tableModel = new DefaultTableModel(rows, columns.toArray());
        this.jTableSourceFiles.setModel(tableModel);
    }

    /**
     * Re-reads the List of source files and re-populates the JTable
     */
    private void repaintSourceList() {
        DefaultTableModel model = (DefaultTableModel) this.jTableSourceFiles.getModel();
        model.setRowCount(0);
        for (File f : PDFJoiner.sourceFiles) {
            model.addRow(new Object[]{f.getName(), f.getAbsolutePath()});
        }
    }

    /**
     * Simple helper method to decide whether or not we can perform a merge
     *
     * @return true if tests passed and ready to merge
     */
    private boolean readyToMerge() {
        boolean status = false;
        if (!PDFJoiner.sourceFiles.isEmpty() && PDFJoiner.destinationFile != null) {
            status = true;
        }
        return status;
    }

    private int getSelectedRow() {
        int row = -1;
        try {
            row = this.jTableSourceFiles.getSelectedRow();
        } catch (IndexOutOfBoundsException e) {
            // do nothing
        }
        return row;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelOutputPDF = new javax.swing.JLabel();
        jTextFieldOutputPDF = new javax.swing.JTextField();
        jButtonChooseOutputPDF = new javax.swing.JButton();
        jLabelSourceFiles = new javax.swing.JLabel();
        jScrollPaneSourceTable = new javax.swing.JScrollPane();
        jTableSourceFiles = new javax.swing.JTable();
        jButtonMoveUp = new javax.swing.JButton();
        jButtonMoveDown = new javax.swing.JButton();
        jButtonRemove = new javax.swing.JButton();
        jButtonAddSourceFiles = new javax.swing.JButton();
        jButtonJoinPDFs = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PDFJoiner");

        jLabelOutputPDF.setLabelFor(jTextFieldOutputPDF);
        jLabelOutputPDF.setText("Output PDF:");
        jLabelOutputPDF.setToolTipText("Select the final destination PDF file as the output.");

        jTextFieldOutputPDF.setEditable(false);
        jTextFieldOutputPDF.setToolTipText("Use the 'Choose...' button to select the output file");

        jButtonChooseOutputPDF.setText("Choose...");
        jButtonChooseOutputPDF.setToolTipText("Choose the destination PDF to output the merged content to.");
        jButtonChooseOutputPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonChooseOutputPDFActionPerformed(evt);
            }
        });

        jLabelSourceFiles.setText("Source files, in order:");

        jScrollPaneSourceTable.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneSourceTable.setDoubleBuffered(true);

        jTableSourceFiles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableSourceFiles.setIntercellSpacing(new java.awt.Dimension(3, 3));
        jTableSourceFiles.setRowHeight(60);
        jTableSourceFiles.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableSourceFiles.setShowGrid(true);
        jScrollPaneSourceTable.setViewportView(jTableSourceFiles);

        jButtonMoveUp.setText("Move Up");
        jButtonMoveUp.setToolTipText("Moves the currently-selected file 'up' the order of files to merge.");
        jButtonMoveUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMoveUpActionPerformed(evt);
            }
        });

        jButtonMoveDown.setText("Move Down");
        jButtonMoveDown.setToolTipText("Moves the currently selected file down the order");
        jButtonMoveDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMoveDownActionPerformed(evt);
            }
        });

        jButtonRemove.setText("Remove File");
        jButtonRemove.setToolTipText("Removes the currently-selected file from the source file list");
        jButtonRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveActionPerformed(evt);
            }
        });

        jButtonAddSourceFiles.setText("Add Source File(s)...");
        jButtonAddSourceFiles.setToolTipText("Provides a dialog to select one or more source files to add to the list.");
        jButtonAddSourceFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddSourceFilesActionPerformed(evt);
            }
        });

        jButtonJoinPDFs.setText("Join PDFs!");
        jButtonJoinPDFs.setToolTipText("Executes the 'join' cycle and merges the source files in the list, in order, to make the output file.");
        jButtonJoinPDFs.setDoubleBuffered(true);
        jButtonJoinPDFs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonJoinPDFsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabelSourceFiles, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelOutputPDF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButtonAddSourceFiles, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonJoinPDFs, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPaneSourceTable, javax.swing.GroupLayout.PREFERRED_SIZE, 1097, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jTextFieldOutputPDF, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonMoveUp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonMoveDown, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonRemove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonChooseOutputPDF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(29, 29, 29))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonChooseOutputPDF, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelOutputPDF)
                        .addComponent(jTextFieldOutputPDF, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jLabelSourceFiles)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonMoveUp, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonMoveDown, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(jScrollPaneSourceTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonAddSourceFiles, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonJoinPDFs, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveActionPerformed
        int row = getSelectedRow();
        if (row > -1) {
            String path = this.jTableSourceFiles.getModel().getValueAt(row, 1).toString();
            File selectedFile = new File(path);
            PDFJoiner.removeFileFromSources(selectedFile);
            repaintSourceList();
        }
    }//GEN-LAST:event_jButtonRemoveActionPerformed

    private void jButtonChooseOutputPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonChooseOutputPDFActionPerformed
        String dest = PDFJoiner.selectOutputFile();
        if (dest != null && !dest.trim().isEmpty()) {
            this.jTextFieldOutputPDF.setText(dest);
        }
    }//GEN-LAST:event_jButtonChooseOutputPDFActionPerformed

    private void jButtonAddSourceFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddSourceFilesActionPerformed
        boolean outcomeSuccessful = PDFJoiner.selectSourceFiles();
        if (outcomeSuccessful) {
            repaintSourceList();
        }
    }//GEN-LAST:event_jButtonAddSourceFilesActionPerformed

    private void jButtonJoinPDFsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonJoinPDFsActionPerformed
        if (readyToMerge()) {
            if (PDFJoiner.executeJoin()) {
                // success
                if (PDFJoiner.outputYesNoQuestionToUser("The merged PDF was successfully created. Would you like to view the new PDF file?", "Success. View new PDF?")) {
                    PDFJoiner.pdfMan.loadPDFToView();
                    System.exit(0);
                } else {
                    System.exit(0);
                }
            } else {
                // failure
                System.exit(1);
            }
        } else {
            PDFJoiner.outputExceptionToUser(new Exception("Not all informaiton such as source and destination have been set. Cannot start the merge process."));
        }
    }//GEN-LAST:event_jButtonJoinPDFsActionPerformed

    private void jButtonMoveUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMoveUpActionPerformed
        int row = getSelectedRow();
        if (row > -1) {
            if (PDFJoiner.reOrderSourceFiles(row, PDFJoiner.DIR_UP)) {
                repaintSourceList();
                this.jTableSourceFiles.setRowSelectionInterval(row - 1, row - 1);
            } else {
                PDFJoiner.outputExceptionToUser(new Exception("Could not move item"));
            }
        }
    }//GEN-LAST:event_jButtonMoveUpActionPerformed

    private void jButtonMoveDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMoveDownActionPerformed
        int row = getSelectedRow();
        if (row > -1) {
            if (PDFJoiner.reOrderSourceFiles(row, PDFJoiner.DIR_DOWN)) {
                repaintSourceList();
                this.jTableSourceFiles.setRowSelectionInterval(row + 1, row + 1);
            } else {
                PDFJoiner.outputExceptionToUser(new Exception("Could not move item"));
            }
        }
    }//GEN-LAST:event_jButtonMoveDownActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAddSourceFiles;
    private javax.swing.JButton jButtonChooseOutputPDF;
    private javax.swing.JButton jButtonJoinPDFs;
    private javax.swing.JButton jButtonMoveDown;
    private javax.swing.JButton jButtonMoveUp;
    private javax.swing.JButton jButtonRemove;
    private javax.swing.JLabel jLabelOutputPDF;
    private javax.swing.JLabel jLabelSourceFiles;
    private javax.swing.JScrollPane jScrollPaneSourceTable;
    private javax.swing.JTable jTableSourceFiles;
    private javax.swing.JTextField jTextFieldOutputPDF;
    // End of variables declaration//GEN-END:variables
}
